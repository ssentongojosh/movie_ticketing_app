# MovieTicketingProject/settings/base.py

"""
Django settings for MovieTicketingProject project.

Generated by 'django-admin startproject' using Django X.Y.Z.

For more information on this file, see
https://docs.djangoproject.com/en/X.Y/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/X.Y/ref/settings/
"""

from pathlib import Path
from decouple import config # Import config from decouple

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent.parent # Adjusted from previous.
# Let's adjust BASE_DIR to point to the root of the backend folder, where .env will reside.
# This makes it easy for decouple to find the .env file.
BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent # Corrected BASE_DIR

print(f"Base Directory path: {BASE_DIR}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/X.Y/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY') # Get SECRET_KEY from .env

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # Add Django REST Framework
    # Our custom apps will go here
    'users',
    'userprofile',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MovieTicketingProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'backend' / 'MovieTicketingProject' / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MovieTicketingProject.wsgi.application'

# Database - THIS WILL BE OVERRIDDEN IN DEVELOPMENT/PRODUCTION SETTINGS
# Databases will be configured in development.py and production.py
DATABASES = {
    # This is a placeholder; it will be overridden.
    'default': {}
}


# Password validation
# https://docs.djangoproject.com/en/X.Y/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/X.Y/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = config('TIME_ZONE', default='Africa/Kampala') # Get TIME_ZONE from .env, with a default

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/X.Y/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # Production static files collection

# Default primary key field type
# https://docs.djangoproject.com/en/X.Y/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Django REST Framework settings (optional, but good to include here)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}



# Where decouple should look for .env file
# By default, it looks in the same directory as the settings file, then parent directories.
# Since BASE_DIR is now set to the backend root, this works naturally.
# Email Backend Settings
# For development, print emails to console.
# In production, you would configure an actual SMTP server or a service like SendGrid/Mailgun.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend' # Another option for dev
# EMAIL_FILE_PATH = BASE_DIR / 'sent_emails' # Directory where emails will be saved if using filebased backend

# For production, you'd typically use:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = config('EMAIL_HOST')
# EMAIL_PORT = config('EMAIL_PORT', cast=int)
# EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='webmaster@localhost')

# Password Reset URL (for frontend to construct the link)
# This is the URL that will be embedded in the password reset email.
# The frontend will then handle this route and display the password reset form.
# We'll use a placeholder for now, assuming React will handle /reset-password/:uid/:token
PASSWORD_RESET_CONFIRM_URL = 'http://localhost:3000/reset-password/{uid}/{token}/'